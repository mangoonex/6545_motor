C51 COMPILER V9.53.0.0   M654X                                                             01/05/2018 11:11:16 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE M654X
OBJECT MODULE PLACED IN m654x.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE source\m654x.c LARGE OPTIMIZE(9,SIZE) REGFILE(.\ce43_ex.abs.ORC) BROWSE 
                    -INCDIR(.\) DEBUG OBJECTEXTEND PRINT(.\m654x.lst) TABS(2) OBJECT(m654x.obj)

line level    source

   1          /***************************************************************************
   2           * This code and information is provided "as is" without warranty of any 
   3           * kind, either expressed or implied, including but not limited to
   4           * implied warranties of merchantability and/or fitness for a particular
   5           * purpose.
   6           *
   7           * Copyright (C) 2008 Maxim Integrated Products Inc. All Rights Reserved.
   8           * AUTHOR:  MTF, RGV
   9           * HISTORY: See end of file
  10           * DESCRIPTION: 71M654x POWER METER - Registers.
  11           ***************************************************************************/
  12          
  13          #include "options.h"
  14          
  15          volatile uint8x_t MUX[6]        _at_ (IO_BASE + 0x100);
  16          volatile uint8x_t CE6           _at_ (IO_BASE + 0x106);
  17          volatile uint8x_t CE5           _at_ (IO_BASE + 0x107);
  18          volatile uint8x_t CE4           _at_ (IO_BASE + 0x108);
  19          volatile uint8x_t CE3           _at_ (IO_BASE + 0x109);
  20          volatile uint8x_t CE2           _at_ (IO_BASE + 0x10A);
  21          volatile uint8x_t CE1           _at_ (IO_BASE + 0x10B);
  22          volatile uint8x_t CE0           _at_ (IO_BASE + 0x10C);
  23          volatile uint16x_t RTM0         _at_ (IO_BASE + 0x10D);
  24          volatile uint8x_t RTM[3]        _at_ (IO_BASE + 0x10F);
  25          
  26          volatile uint8x_t CKGN          _at_ (IO_BASE + 0x200);
  27          
  28          volatile uint16x_t CHIPID       _at_ (IO_BASE + 0x300);
  29          volatile int8x_t TRIMT          _at_ (IO_BASE + 0x309);
  30          
  31          volatile uint8x_t LCD0          _at_ (IO_BASE + 0x400);
  32          volatile uint8x_t LCD1          _at_ (IO_BASE + 0x401);
  33          volatile uint8x_t LCD2          _at_ (IO_BASE + 0x402);
  34          volatile uint8x_t LCD_MAP[7]    _at_ (IO_BASE + 0x405);
  35          volatile uint8x_t LCD4          _at_ (IO_BASE + 0x40C);
  36          volatile uint8x_t LCD_DAC       _at_ (IO_BASE + 0x40D);
  37          //volatile uint8x_t SEGDIO[55]    _at_ (IO_BASE + 0x410); 6545 IO 口并没有这么多，另外在下面定义
  38          volatile uint8x_t DIO_R[6]      _at_ (IO_BASE + 0x450);
  39          volatile uint8x_t DIO0          _at_ (IO_BASE + 0x456);
  40          volatile uint8x_t DIO1          _at_ (IO_BASE + 0x457);
  41          volatile uint8x_t DIO2          _at_ (IO_BASE + 0x458);
  42          
  43          volatile uint8x_t SPARENV       _at_ (IO_BASE + 0x500);   
  44          volatile uint8x_t FOVRD         _at_ (IO_BASE + 0x501);
  45          volatile uint8x_t TMUX          _at_ (IO_BASE + 0x502);
  46          volatile uint8x_t TMUX2         _at_ (IO_BASE + 0x503);
  47          volatile uint8x_t RTCA_ADJ      _at_ (IO_BASE + 0x504);
  48          
  49          volatile uint16x_t REMOTE       _at_ (IO_BASE + 0x602);   
  50          
  51          volatile uint8x_t INT1_E        _at_ (IO_BASE + 0x700);   
  52          volatile uint8x_t INT2_E        _at_ (IO_BASE + 0x701);   
  53          volatile uint8x_t SECURE        _at_ (IO_BASE + 0x702);
  54          volatile uint8x_t ANALOG0       _at_ (IO_BASE + 0x704);
C51 COMPILER V9.53.0.0   M654X                                                             01/05/2018 11:11:16 PAGE 2   

  55          volatile uint8x_t VERSION       _at_ (IO_BASE + 0x706);
  56          volatile uint8x_t INTBITS       _at_ (IO_BASE + 0x707);
  57          volatile uint8x_t SPI0          _at_ (IO_BASE + 0x708);
  58          volatile uint8x_t RCE0          _at_ (IO_BASE + 0x709);
  59          volatile uint8x_t RTMUX         _at_ (IO_BASE + 0x70A);
  60          volatile uint8x_t INFO_PG       _at_ (IO_BASE + 0x70B);
  61          volatile uint8x_t DIO3          _at_ (IO_BASE + 0x70C);
  62          
  63          volatile uint8x_t WAKE          _at_ (IO_BASE + 0x880);
  64          volatile int16x_t STEMP         _at_ (IO_BASE + 0x881);
  65          volatile uint8x_t BSENSE        _at_ (IO_BASE + 0x885);
  66          volatile uint8x_t LKPADDR       _at_ (IO_BASE + 0x887);
  67          volatile uint8x_t LKPDATA       _at_ (IO_BASE + 0x888);
  68          volatile uint8x_t LKPCTRL       _at_ (IO_BASE + 0x889);
  69          volatile uint8x_t RTC0          _at_ (IO_BASE + 0x890);
  70          volatile uint8x_t RTC2          _at_ (IO_BASE + 0x892); // SUBSEC
  71          volatile uint8x_t RTC[7]        _at_ (IO_BASE + 0x893);   
  72          volatile uint8x_t RTC_PNQREG[3] _at_ (IO_BASE + 0x89B);
  73          volatile uint8x_t RTC_TMIN      _at_ (IO_BASE + 0x89E);
  74          volatile uint8x_t RTC_THR       _at_ (IO_BASE + 0x89F);
  75          volatile uint8x_t TEMP          _at_ (IO_BASE + 0x8A0);
  76          volatile uint8x_t WF1           _at_ (IO_BASE + 0x8B0);
  77          volatile uint8x_t WF2           _at_ (IO_BASE + 0x8B1);
  78          volatile uint8x_t MISC          _at_ (IO_BASE + 0x8B2);
  79          volatile uint8x_t WAKE_E        _at_ (IO_BASE + 0x8B3);
  80          volatile uint8x_t WDRST         _at_ (IO_BASE + 0x8B4);
  81          
  82          //YANGKE in order to access dio16~dio31 20180103
  83          volatile uint8x_t DIO19         _at_ (IO_BASE + 0x423);
  84          volatile uint8x_t DIO20         _at_ (IO_BASE + 0x424);
  85          volatile uint8x_t DIO21         _at_ (IO_BASE + 0x425);
  86          volatile uint8x_t DIO22         _at_ (IO_BASE + 0x426);
  87          volatile uint8x_t DIO23         _at_ (IO_BASE + 0x427);
  88          volatile uint8x_t DIO24         _at_ (IO_BASE + 0x428);
  89          volatile uint8x_t DIO25         _at_ (IO_BASE + 0x429);
  90          volatile uint8x_t DIO28         _at_ (IO_BASE + 0x42C);
  91          volatile uint8x_t DIO29         _at_ (IO_BASE + 0x42D);
  92          
  93          // CE calibration registers.
  94          volatile int32x_t iadc67      _at_ (CE_DATA_BASE + (0x00 << 2));
  95          volatile int32x_t cal_i0     _at_ (CE_DATA_BASE + (0x10 << 2));
  96          volatile int32x_t cal_v0     _at_ (CE_DATA_BASE + (0x11 << 2));
  97          volatile int32x_t phadj_0    _at_ (CE_DATA_BASE + (0x12 << 2));
  98          
  99          volatile int32x_t cal_i1     _at_ (CE_DATA_BASE + (0x13 << 2));
 100          volatile int32x_t cal_v1     _at_ (CE_DATA_BASE + (0x14 << 2));
 101          volatile int32x_t phadj_1    _at_ (CE_DATA_BASE + (0x15 << 2));
 102          
 103          volatile int32x_t cal_i2     _at_ (CE_DATA_BASE + (0x16 << 2));
 104          volatile int32x_t cal_v2     _at_ (CE_DATA_BASE + (0x17 << 2));
 105          volatile int32x_t phadj_2    _at_ (CE_DATA_BASE + (0x18 << 2));
 106          
 107          volatile int32x_t cal_i3     _at_ (CE_DATA_BASE + (0x19 << 2));
 108          volatile int32x_t degscale   _at_ (CE_DATA_BASE + (0x1A << 2));
 109          volatile int32x_t ce_ppmc1   _at_ (CE_DATA_BASE + (0x1B << 2));
 110          volatile int32x_t ce_ppmc2   _at_ (CE_DATA_BASE + (0x1C << 2));
 111          
 112          volatile int32x_t ceconfig   _at_ (CE_DATA_BASE + (0x20 << 2));
 113          volatile int32x_t wrate      _at_ (CE_DATA_BASE + (0x21 << 2));
 114          volatile int32x_t kvar       _at_ (CE_DATA_BASE + (0x22 << 2));
 115          volatile int32x_t sumpre     _at_ (CE_DATA_BASE + (0x23 << 2));
 116          volatile int32x_t sag_thr    _at_ (CE_DATA_BASE + (0x24 << 2));
C51 COMPILER V9.53.0.0   M654X                                                             01/05/2018 11:11:16 PAGE 3   

 117          
 118          volatile int32x_t quant_va   _at_ (CE_DATA_BASE + (0x25 << 2));
 119          volatile int32x_t quant_ia   _at_ (CE_DATA_BASE + (0x26 << 2));
 120          volatile int32x_t quant_a    _at_ (CE_DATA_BASE + (0x27 << 2));
 121          volatile int32x_t quant_vara _at_ (CE_DATA_BASE + (0x28 << 2));
 122          
 123          volatile int32x_t quant_vb   _at_ (CE_DATA_BASE + (0x29 << 2));
 124          volatile int32x_t quant_ib   _at_ (CE_DATA_BASE + (0x2A << 2));
 125          volatile int32x_t quant_b    _at_ (CE_DATA_BASE + (0x2B << 2));
 126          volatile int32x_t quant_varb _at_ (CE_DATA_BASE + (0x2C << 2));
 127          
 128          volatile int32x_t quant_vc   _at_ (CE_DATA_BASE + (0x2D << 2));
 129          volatile int32x_t quant_ic   _at_ (CE_DATA_BASE + (0x2E << 2));
 130          volatile int32x_t quant_c    _at_ (CE_DATA_BASE + (0x2F << 2));
 131          volatile int32x_t quant_varc _at_ (CE_DATA_BASE + (0x30 << 2));
 132          
 133          volatile int32x_t quant_id   _at_ (CE_DATA_BASE + (0x31 << 2));
 134          
 135          // (the CE's file name is at 0x38 in the CE data array)
 136          
 137          volatile int32x_t gain_adj[5] _at_ (CE_DATA_BASE + (0x40 << 2));
 138          
 139          volatile int32x_t apulsew      _at_ (CE_DATA_BASE + (0x45 << 2));
 140          volatile int32x_t wpulse_ctr   _at_ (CE_DATA_BASE + (0x46 << 2));
 141          volatile int32x_t wpulse_frac  _at_ (CE_DATA_BASE + (0x47 << 2));
 142          volatile int32x_t wsum_accum   _at_ (CE_DATA_BASE + (0x48 << 2));
 143          
 144          volatile int32x_t apulser      _at_ (CE_DATA_BASE + (0x49 << 2));
 145          volatile int32x_t rpulse_ctr   _at_ (CE_DATA_BASE + (0x4A << 2));
 146          volatile int32x_t rpulse_frac  _at_ (CE_DATA_BASE + (0x4B << 2));
 147          volatile int32x_t vsum_accum   _at_ (CE_DATA_BASE + (0x4C << 2));
 148          
 149          // (The CE word at 4F is unused, and can be used for a checksum.)
 150          
 151          // Outputs from CE.
 152          volatile int32_t pdata cestatus      _at_ (CE_DATA_BASE + (0x80 << 2));   
 153          volatile int32_t pdata temp_ce       _at_ (CE_DATA_BASE + (0x81 << 2));   
 154          volatile int32_t pdata freq          _at_ (CE_DATA_BASE + (0x82 << 2));   
 155          volatile int32_t pdata mainedge      _at_ (CE_DATA_BASE + (0x83 << 2));   
 156          
 157          volatile int32_t pdata wsum          _at_ (CE_DATA_BASE + (0x84 << 2));   
 158          volatile int32_t pdata w0sum         _at_ (CE_DATA_BASE + (0x85 << 2));   
 159          volatile int32_t pdata w1sum         _at_ (CE_DATA_BASE + (0x86 << 2));   
 160          volatile int32_t pdata w2sum         _at_ (CE_DATA_BASE + (0x87 << 2));   
 161          
 162          volatile int32_t pdata varsum        _at_ (CE_DATA_BASE + (0x88 << 2));   
 163          volatile int32_t pdata var0sum       _at_ (CE_DATA_BASE + (0x89 << 2));   
 164          volatile int32_t pdata var1sum       _at_ (CE_DATA_BASE + (0x8A << 2));
 165          volatile int32_t pdata var2sum       _at_ (CE_DATA_BASE + (0x8B << 2));
 166          
 167          volatile int32_t pdata i0sqsum       _at_ (CE_DATA_BASE + (0x8C << 2));
 168          volatile int32_t pdata i1sqsum       _at_ (CE_DATA_BASE + (0x8D << 2));   
 169          volatile int32_t pdata i2sqsum       _at_ (CE_DATA_BASE + (0x8E << 2));   
 170          volatile int32_t pdata idsqsum       _at_ (CE_DATA_BASE + (0x8F << 2));   
 171          
 172          volatile int32_t pdata v0sqsum       _at_ (CE_DATA_BASE + (0x90 << 2));   
 173          volatile int32_t pdata v1sqsum       _at_ (CE_DATA_BASE + (0x91 << 2));   
 174          volatile int32_t pdata v2sqsum       _at_ (CE_DATA_BASE + (0x92 << 2));   
 175          volatile int32_t pdata vdsqsum       _at_ (CE_DATA_BASE + (0x93 << 2));   
 176          
 177          volatile int32_t pdata ph_atob       _at_ (CE_DATA_BASE + (0x94 << 2)); 
 178          volatile int32_t pdata ph_atoc       _at_ (CE_DATA_BASE + (0x95 << 2));
C51 COMPILER V9.53.0.0   M654X                                                             01/05/2018 11:11:16 PAGE 4   

 179          
 180          volatile int32_t pdata i0sqres       _at_ (CE_DATA_BASE + (0x96 << 2));   
 181          volatile int32_t pdata i1sqres       _at_ (CE_DATA_BASE + (0x97 << 2));   
 182          volatile int32_t pdata i2sqres       _at_ (CE_DATA_BASE + (0x98 << 2));   
 183          volatile int32_t pdata idsqres       _at_ (CE_DATA_BASE + (0x99 << 2));   
 184          
 185          /***************************************************************************
 186           * History:
 187           * $Log: m654x.c,v $
 188           * Revision 1.3  2010/06/30 23:36:04  Ray.Vandewalker
 189           * Ported to B01
 190           *
 191           * Revision 1.13  2010/06/26 03:56:44  Ray.Vandewalker
 192           * Added commit" to logging.  Added shorter nap for me.
 193           *
 194           * Revision 1.12  2010/05/24 22:26:18  Ray.Vandewalker
 195           * 5.2g
 196           * First cut at 2-pole shunt filtering.
 197           * Changed name to Maxim.
 198           * version broken out to a separate file.
 199           *
 200           * Revision 1.11  2010/04/28 18:38:10  tvander
 201           * Pulse width is unused by both CE and MPU code.
 202           *
 203           * Revision 1.10  2010/03/26 21:08:58  tvander
 204           * First cut that works with B01
 205           *
 206           * Revision 1.9  2009/06/16 05:23:24  tvander
 207           * *** empty log message ***
 208           *
 209           * Revision 1.8  2009/05/29 18:18:15  tvander
 210           * Integrated 6000
 211           *
 212           * Revision 1.7  2009/05/07 20:24:33  tvander
 213           * Added fractional pulses.
 214           *
 215           * Revision 1.6  2009/04/21 00:39:39  tvander
 216           * Modified to permit actual use of nonvolatile memory.
 217           *
 218           * Revision 1.5  2009/04/10 20:55:10  tvander
 219           * Corrected address of RTCA_ADJ
 220           *
 221           * Revision 1.4  2009/04/09 22:14:21  tvander
 222           * Added RTC_ADJ
 223           *
 224           * Revision 1.3  2009/03/12 01:32:02  tvander
 225           * Fixed time and date.
 226           *
 227           * Revision 1.2  2009/03/07 03:09:17  tvander
 228           * *** empty log message ***
 229           *
 230           * Revision 1.1  2009/03/02 10:13:06  tvander
 231           * *** empty log message ***
 232           *
 233           * Revision 1.9  2009/01/08 01:19:23  tvander
 234           * Corrected to revised CE code.
 235           *
 236           * Revision 1.8  2008/11/20 00:37:13  tvander
 237           * Changed the name of vah_ex to vah_im, which is more accurate.
 238           *
 239           * Revision 1.7  2008/11/14 20:00:56  tvander
 240           * Latest version of CE interface.
C51 COMPILER V9.53.0.0   M654X                                                             01/05/2018 11:11:16 PAGE 5   

 241           *
 242           * Revision 1.6  2008/11/05 01:26:58  tvander
 243           * Modified to support CE
 244           *
 245           * Revision 1.5  2008/10/20 22:27:34  tvander
 246           * Added CE registers.
 247           *
 248           * Revision 1.4  2008/10/07 22:40:49  tvander
 249           * *** empty log message ***
 250           *
 251           * Revision 1.3  2008/09/29 16:45:42  tvander
 252           * Fixed SUBSEC
 253           *
 254           * Revision 1.2  2008/09/13 00:44:32  tvander
 255           * Fixed I/O RAM variables.
 256           *
 257           * Revision 1.1  2008/09/02 22:15:08  tvander
 258           * First commit.
 259           *
 260           * Revision 1.9  2006/09/09 01:15:51  gmikef
 261           * *** empty log message ***
 262           *
 263           * Revision 1.7  2005/09/22 23:45:28  tvander
 264           * Clean build all models and unit tests, updated copyright to be fore Teridian
 265           *
 266           * Revision 1.6  2005/04/30 02:20:25  gmikef
 267           * *** empty log message ***
 268           *
 269           * Revision 1.5  2005/04/28 19:12:28  tvander
 270           * Comments only!  Restored history comments.
 271           *
 272           * Revision 1.4  2005/04/27 23:48:52  gmikef
 273           * Some MATH rountines now use 'idata'.
 274           * Added MATH_FAST flag to 'options.h".
 275           * Changed "6521B.Uv2" to max optimization.
 276           *
 277           * Revision 1.3  2005/04/21 02:08:55  gmikef
 278           * *** empty log message ***
 279           *
 280           * Revision 1.2  2005/04/06 18:10:12  gmikef
 281           * *** empty log message ***
 282           *
 283           * Revision 1.1  2005/03/24 21:45:47  gmikef
 284           * *** empty log message ***
 285           *
 286           * Copyright (C) 2005 Maxim Integrated Products Inc. All Rights Reserved.
 287           * this program is fully protected by the United States copyright
 288           * laws and is the property of Maxim Integrated Products Inc.
 289           ***************************************************************************/
 290          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
